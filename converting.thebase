#include "main.h"

	unsigned int sbase_converter(buffer_v *output, long int num, char *base,
	unsigned char flags, int wid, int prec);
	unsigned int ubase_converter(buffer_v *output,
 	unsigned long int num, char *base,
	unsigned char flags, int wid, int prec);

/**
 * sbase_converter - Converts long signed to an inputted base and stores
 * results to a buffer contained in a struct.
 * @output: buffer_v struct containing a character array.
 * @num: Signed long to be converted.
 * @base: Pointer to a string containing the base to convert .
 * @flags: Flag modifiers.
 * @wid: Width modifier.
 * @prec: Precision modifier.
 *
 * Return: Number of bytes stored to the buffer.
 */
unsigned int sbase_converter(buffer_v *output, long int num, char *base,
  unsigned char flags, int wid, int prec)
{
 int size;
 char digit, pad = '0';
 unsigned int ret = 1;

 for (size = 0; *(base + size);)
  size++;

 if (num >= size || num <= -size)
  ret += sbase_converter(output, num / size, base,
    flags, wid - 1, prec - 1);

 else
 {
  for (; prec > 1; prec--, wid--) /* Handle precision */
   ret += _memcpy(output, &pad, 1);

  if (F_NEG == 0) /* Handle width */
  {
   pad = (F_ZERO == 1) ? '0' : ' ';
   for (; wid > 1; wid--)
    ret += _memcpy(output, &pad, 1);
  }
 }

 digit = base[(num < 0 ? -1 : 1) * (num % size)];
 _memcpy(output, &digit, 1);

 return (ret);
}

/**
 * ubase_converter - This converts unsigned long to an inputted base and
 * stores the result to a buffer contained in a struct.
 * @output: buffer_v struct containing a character array.
 * @num: unsigned long to be converted.
 * @base: Pointer to a string containing the base to convert.
 * @flags: Flag modifiers.
 * @wid: Width modifier.
 * @prec: Precision modifier.
 *
 * Return: Number of bytes stored to the buffer.
 */
unsigned int ubase_converter(buffer_v *output, unsigned long int num, char *base,
  unsigned char flags, int wid, int prec)
{
 unsigned int size, ret = 1;
 char digit, pad = '0', *lead = "0x";

 for (size = 0; *(base + size);)
  size++;

 if (num >= size)
  ret += ubase_converter(output, num / size, base,
    flags, wid - 1, prec - 1);

 else
 {
  if (((flags >> 5) & 1) == 1) /* Printing a ptr address */
  {
   wid -= 2;
   prec -= 2;
  }
  for (; prec > 1; prec--, wid--) /* Handle precision */
   ret += _memcpy(output, &pad, 1);

  if (NEG_FLAG == 0) /* Handle width */
  {
   pad = (ZERO_FLAG == 1) ? '0' : ' ';
   for (; wid > 1; wid--)
    ret += _memcpy(output, &pad, 1);
  }
  if (((flags >> 5) & 1) == 1) /* Print 0x for ptr address */
   ret += _memcpy(output, lead, 2);
 }

 digit = base[(num % size)];
 _memcpy(output, &digit, 1);

 return (ret);
}
