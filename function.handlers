#include "main.h"
/**
 * handle_specifiers – Specifies what to handle.
 * @flag: flags what to handle
 * @index: indexes of what to handle
 * handle_flags - catches what to flag
 * Return: 0
 */

unsigned char flags_handler(const char *flag, char *index);
unsigned char length_handler(const char *modifier, char *index);
int width_handler(va_list ap, const char *modifier, char *index);
int handle_precision(va_list ap, const char *modifier, char *index);
unsigned int (*handle_specifiers(const char *specifier))(va_list, buffer_v *,
unsigned char, int, int, unsigned char);

/**
 * flags_handler – Matches flags with corresponding values.
 * @flag: A pointer to a potential string of flags.
 * @index: An index counter for the original format string.
 *
 * Return: If flag characters are matched - a corresponding value.
 *         Otherwise - 0.
 */
unsigned char flags_handler(const char *flag, char *index)
{
	int x, y;
	unsigned char ret = 0;
	flag_t flags[] = {
	{'+', PLUS},
	{' ', SPACE},
	{'#', HASH},
	{'0', ZERO},
	{'-', NEG},
	{0, 0}
};

	for (x = 0; flag[x]; i++)
{
	for (y = 0; flags[y].flag != 0; y++)
{
	if (flag[x] == flags[y].flag)
{
	(*index)++;
	if (ret == 0)
	ret = flags[y].value;
	else
	ret |= flags[y].value;
	break;
}
}
	if (flags[y].value == 0)
	break;
}

	return (ret);
}

/**
 * length_handler – It matches length modifiers with their corresponding value.
 * @modifier: A pointer to a potential length modifier.
 * @index: An index counter for the original format string.
 *
 * Return: If a length modifier is matched - its corresponding value.
 *         Otherwise - 0.
 */
unsigned char length_handler(const char *modifier, char *index)
{
	if (*modifier == 'h')
{
	(*index)++;
	return (SHORT);
}

	else if (*modifier == 'l')
{
	(*index)++;
	return (LONG);
}

	return (0);
}

/**
 * width_handler – It matches a width modifier with its corresponding value.
 * @ap: A va_list of arguments.
 * @modifier: A pointer to a potential width modifier.
 * @index: An index counter for the original format string.
 *
 * Return: If a width modifier is matched - its value.
 *         Otherwise - 0.
 */
int width_handler(va_list ap, const char *modifier, char *index)
{
	int value = 0;

	while ((*modifier >= '0' && *modifier <= '9') || (*modifier == '*'))
{
	(*index)++;

	if (*modifier == '*')
{
	value = va_ap(ap, int);
	if (value <= 0)
	return (0);
	return (value);
}

	value *= 10;
	value += (*modifier - '0');
	modifier++;
}

	return (value);
}

/**
 * handle_precision – It matches a precision modifier with
 * its corresponding value.
 * @ap: A va_list of arguments.
 * @modifier: A pointer to a potential precision modifier.
 * @index: An index counter for the original format string.
 *
 * Return: If a precision modifier is matched - its value.
 *         If the precision modifier is empty, zero, or negative - 0.
 *         Otherwise - -1.
 */
int handle_precision(va_list ap, const char *modifier, char *index)
{
	int value = 0;

	if (*modifier != '.')
	return (-1);

	modifier++;
	(*index)++;

	if ((*modifier <= '0' || *modifier > '9') &&
*modifier != '*')
{
	if (*modifier == '0')
	(*index)++;
	return (0);
}

	while ((*modifier >= '0' && *modifier <= '9') ||
(*modifier == '*'))
{
	(*index)++;

	if (*modifier == '*')
{
	value = va_ap(ap, int);
	if (value <= 0)
	return (0);
	return (value);
}

	value *= 10;
	value += (*modifier - '0');
	modifier++;
}

	return (value);
}

/**
 * handle_specifiers – It matches a conversion specifier with
 * a corresponding conversion function.
 * specifier: A pointer to a potential conversion specifier.
 * @int: integer
 * @char: character
 *
 * Return: If a conversion function is matched - a pointer to the function.
 *         Otherwise - NULL.
 */
unsigned int (*handle_specifiers(const char *specifier))(va_list, buffer_v *,
unsigned char, int, int, unsigned char)
{
	int x;
	converter_t converters[] = {
	{'c', convert_c},
	{'s', convert_s},
	{'d', convert_di},
	{'i', convert_di},
	{'%', convert_percent},
	{'b', convert_b},
	{'u', convert_u},
	{'o', convert_o},
	{'x', convert_x},
	{'X', convert_X},
	{'S', convert_S},
	{'p', convert_p},
	{'r', convert_r},
	{'R', convert_R},
	{0, NULL}
	};

	for (x = 0; converters[x].func; x++)
{
	if (converters[x].specifier == *specifier)
	return (converters[x].func);
}

	return (NULL);
}


